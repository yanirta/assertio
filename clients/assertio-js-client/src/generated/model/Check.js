/**
 * Assertio - Assertion library API
 * Distributed assertion library
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Identifier from './Identifier';
import Tag from './Tag';

/**
 * The Check model module.
 * @module model/Check
 * @version 0.0.1
 */
class Check {
    /**
     * Constructs a new <code>Check</code>.
     * @alias module:model/Check
     * @param rightCompareObj {Object.<String, Object>} Expected result
     * @param uname {String} Check unique name (used as id)
     */
    constructor(rightCompareObj, uname) { 
        
        Check.initialize(this, rightCompareObj, uname);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, rightCompareObj, uname) { 
        obj['rightCompareObj'] = rightCompareObj;
        obj['uname'] = uname;
    }

    /**
     * Constructs a <code>Check</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Check} obj Optional instance to populate.
     * @return {module:model/Check} The populated <code>Check</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Check();

            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = ApiClient.convertToType(data['identifiers'], [Identifier]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
            if (data.hasOwnProperty('leftCompareObj')) {
                obj['leftCompareObj'] = ApiClient.convertToType(data['leftCompareObj'], {'String': Object});
            }
            if (data.hasOwnProperty('rightCompareObj')) {
                obj['rightCompareObj'] = ApiClient.convertToType(data['rightCompareObj'], {'String': Object});
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('uname')) {
                obj['uname'] = ApiClient.convertToType(data['uname'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Date} timestamp
 */
Check.prototype['timestamp'] = undefined;

/**
 * An array of ordered static* identifiers that in combination with the checkUName used as a unique record identifiers. <br> *Static refers to the fact the identifiers will remain in the same order, unless there's a desired change.
 * @member {Array.<module:model/Identifier>} identifiers
 */
Check.prototype['identifiers'] = undefined;

/**
 * Non-unique identifiers (tags) for the check that can be searched by.
 * @member {Array.<module:model/Tag>} tags
 */
Check.prototype['tags'] = undefined;

/**
 * Actual result
 * @member {Object.<String, Object>} leftCompareObj
 */
Check.prototype['leftCompareObj'] = undefined;

/**
 * Expected result
 * @member {Object.<String, Object>} rightCompareObj
 */
Check.prototype['rightCompareObj'] = undefined;

/**
 * Comparison operator, from left to right, when order matters.
 * @member {module:model/Check.OperatorEnum} operator
 * @default 'equals'
 */
Check.prototype['operator'] = 'equals';

/**
 * Check unique name (used as id)
 * @member {String} uname
 */
Check.prototype['uname'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
Check['OperatorEnum'] = {

    /**
     * value: "equals"
     * @const
     */
    "equals": "equals",

    /**
     * value: "notequals"
     * @const
     */
    "notequals": "notequals",

    /**
     * value: "greaterthan"
     * @const
     */
    "greaterthan": "greaterthan",

    /**
     * value: "lessthan"
     * @const
     */
    "lessthan": "lessthan",

    /**
     * value: "contains"
     * @const
     */
    "contains": "contains",

    /**
     * value: "notcontains"
     * @const
     */
    "notcontains": "notcontains"
};



export default Check;

