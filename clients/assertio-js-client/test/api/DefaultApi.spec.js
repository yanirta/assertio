/**
 * Assertio - Assertion library API
 * Distributed assertion library
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { AssertionError } from 'assert';
import { strict as assert } from 'assert';

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd() + '/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd() + '/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.client);
  }
}(this, function (expect, client) {
  'use strict';

  var assertio;

  beforeEach(function () {
    assertio = new client.default("abc", "http://localhost:8080/api/0.0.1");
  });

  var getProperty = function (object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function (object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('assertio', function () {
    this.timeout(10000);
    it('Primitive test', function () {
      return Promise.all(
        [
          assertio.assertEquals(null, null, "Nulls should match"),
          assertio.assertEquals({}, {}, 'empties should match'),
          assertio.assertEquals(1, 1, 'Numbers should match'),
          assertio.assertEquals('abc', 'abc', 'Strings should match'),
          assertio.assertEquals(1.23, 1.23, "Floating numbers should match"),
          assertio.assertEquals(true, true, "Booleans should match"),
          assertio.assertEquals('a', 'a', "Chars should match")
        ]
      );
    });

    it('Arrays test', () => {
      return Promise.all([
        assertio.assertEquals([1, 2, 3], [1, 2, 3], "Int arrays should match"),
        assertio.assertEquals(["abc", "def", "ge"], ["abc", "def", "ge"], "String arrays should match"),
        assertio.assertEquals([1.2, 2.3, 3.4], [1.2, 2.3, 3.4], "Double arrays should match"),
        assertio.assertEquals(['a', 'b', 'c'], ['a', 'b', 'c'], "Byte arrays should match"),
        assertio.assertEquals([true, true, false], [true, true, false], "Bool arrays should match"),
        assertio.assertEquals([1, 1.2, 'a', true, "abc", {}, null], [1, 1.2, 'a', true, "abc", {}, null], "Mixed arrays should match")
      ]);
    });

    it('Primitives not eq. test', () => {
      return Promise.all([
        assertio.assertNotEquals("abc", "abd", "Strings shouldn't match"),
        assertio.assertNotEquals(1, 2, "Numbers shouldn't match"),
        assertio.assertNotEquals(1.23, 1.24, "Floating numbers shouldn't match"),
        assertio.assertNotEquals(true, false, "Booleans shouldn't match"),
        assertio.assertNotEquals('a', 'b', "Chars shouldn't match")
      ]);
    });

    it('Arrays not eq. test', () => {
      return Promise.all([
        assertio.assertNotEquals([1, 2, 3], [1, 2, 4], "Int arrays shouldn't match"),
        assertio.assertNotEquals(["abc", "def", "geh"], ["abc", "def", "gehh"], "String arrays shouldn't match"),
        assertio.assertNotEquals([1.2, 2.3, 3.4], [1.2, 2.3, 3.3], "Double arrays shouldn't match"),
        assertio.assertNotEquals(['a', 'b', 'c'], ['a', 'b', 'd'], "Byte arrays shouldn't match"),
        assertio.assertNotEquals(['a', 'b', 'c', 'd'], ['a', 'b', 'c'], "Char arrays shouldn't match"),
        assertio.assertNotEquals([true, false], [true, true, false], "Bool arrays shouldn't match"),
        assertio.assertNotEquals([1, 1.2, 'a', true, "abc", {}, null], [1, 1.2, 'a', true, "abc", {}, null, true], "Mixed arrays shouldn't match"),
        assertio.assertNotEquals([1, 1.2, 'a', true, "abd", {}, null], [1, 1.2, 'a', true, "abc", {}, null, true], "Mixed arrays shouldn't match")
      ]);
    });

    it('Greater and Lower test', () => {
      return Promise.all([
        assertio.assertGreater(1000, 0, "1000 should be greater than 0"),
        assertio.assertGreater(0.1, 0.01, "0.1 should be greater than 0.01"),
        assertio.assertLower(0, 1000, "1000 should be lower than 0"),
        assertio.assertLower(0.01, 0.1, "0.01 should be lower than 0.1")
      ]);
    });

    it('Failures test', (done) => {
      assertio.assertEquals("abc", 1, "Error should be generated")
        .catch((e) => {
          if (e instanceof AssertionError)
            done();
          else throw 'failure';
        })
    });

    it('Failures test edge case', (done) => {
      assertio.assertEquals(null, 1, "Error should be generated")
        .catch((e) => {
          if (e instanceof AssertionError)
            done();
          else throw 'failure';
        })
    });

    it('Primitives Validation test', () => {
      return Promise.all([
        assertio.validateEquals(null, "Nulls should match"),
        assertio.validateEquals({}, 'empties should match'),
        assertio.validateEquals(1, 'Numbers should match'),
        assertio.validateEquals('abc', 'Strings should match'),
        assertio.validateEquals(1.23, "Floating numbers should match"),
        assertio.validateEquals(true, "Booleans should match"),
        assertio.validateEquals('a', "Chars should match")
      ]);
    });

    it('Test callbacks with primitives', (done) => {
      assertio.assertEquals(1, 1, 'Numbers should match', (d1) => {
        assert(d1.status === 'Passed', 'Status must be Passed');
        done();
        try {
          assertio.assertEquals('abc', 1, 'Error should be generated', (d2) => {
            throw new Error('The test was failed');
          });
        } catch (err) {
          done();
        }
      });
    });

  }); //Describe
}));//main