# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.identifier import Identifier
from openapi_server.models.tag import Tag
from openapi_server import util

from openapi_server.models.identifier import Identifier  # noqa: E501
from openapi_server.models.tag import Tag  # noqa: E501

class Check(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp=None, identifiers=None, tags=None, left_compare_obj=None, right_compare_obj=None, operator='equals', uname=None):  # noqa: E501
        """Check - a model defined in OpenAPI

        :param timestamp: The timestamp of this Check.  # noqa: E501
        :type timestamp: datetime
        :param identifiers: The identifiers of this Check.  # noqa: E501
        :type identifiers: List[Identifier]
        :param tags: The tags of this Check.  # noqa: E501
        :type tags: List[Tag]
        :param left_compare_obj: The left_compare_obj of this Check.  # noqa: E501
        :type left_compare_obj: Dict[str, object]
        :param right_compare_obj: The right_compare_obj of this Check.  # noqa: E501
        :type right_compare_obj: Dict[str, object]
        :param operator: The operator of this Check.  # noqa: E501
        :type operator: str
        :param uname: The uname of this Check.  # noqa: E501
        :type uname: str
        """
        self.openapi_types = {
            'timestamp': datetime,
            'identifiers': List[Identifier],
            'tags': List[Tag],
            'left_compare_obj': Dict[str, object],
            'right_compare_obj': Dict[str, object],
            'operator': str,
            'uname': str
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'identifiers': 'identifiers',
            'tags': 'tags',
            'left_compare_obj': 'leftCompareObj',
            'right_compare_obj': 'rightCompareObj',
            'operator': 'operator',
            'uname': 'uname'
        }

        self._timestamp = timestamp
        self._identifiers = identifiers
        self._tags = tags
        self._left_compare_obj = left_compare_obj
        self._right_compare_obj = right_compare_obj
        self._operator = operator
        self._uname = uname

    @classmethod
    def from_dict(cls, dikt) -> 'Check':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The check of this Check.  # noqa: E501
        :rtype: Check
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this Check.


        :return: The timestamp of this Check.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Check.


        :param timestamp: The timestamp of this Check.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def identifiers(self):
        """Gets the identifiers of this Check.

        An array of ordered static* identifiers that in combination with the checkUName used as a unique record identifiers. <br> *Static refers to the fact the identifiers will remain in the same order, unless there's a desired change.  # noqa: E501

        :return: The identifiers of this Check.
        :rtype: List[Identifier]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Check.

        An array of ordered static* identifiers that in combination with the checkUName used as a unique record identifiers. <br> *Static refers to the fact the identifiers will remain in the same order, unless there's a desired change.  # noqa: E501

        :param identifiers: The identifiers of this Check.
        :type identifiers: List[Identifier]
        """

        self._identifiers = identifiers

    @property
    def tags(self):
        """Gets the tags of this Check.

        Non-unique identifiers (tags) for the check that can be searched by.  # noqa: E501

        :return: The tags of this Check.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Check.

        Non-unique identifiers (tags) for the check that can be searched by.  # noqa: E501

        :param tags: The tags of this Check.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def left_compare_obj(self):
        """Gets the left_compare_obj of this Check.

        Actual result  # noqa: E501

        :return: The left_compare_obj of this Check.
        :rtype: Dict[str, object]
        """
        return self._left_compare_obj

    @left_compare_obj.setter
    def left_compare_obj(self, left_compare_obj):
        """Sets the left_compare_obj of this Check.

        Actual result  # noqa: E501

        :param left_compare_obj: The left_compare_obj of this Check.
        :type left_compare_obj: Dict[str, object]
        """

        self._left_compare_obj = left_compare_obj

    @property
    def right_compare_obj(self):
        """Gets the right_compare_obj of this Check.

        Expected result  # noqa: E501

        :return: The right_compare_obj of this Check.
        :rtype: Dict[str, object]
        """
        return self._right_compare_obj

    @right_compare_obj.setter
    def right_compare_obj(self, right_compare_obj):
        """Sets the right_compare_obj of this Check.

        Expected result  # noqa: E501

        :param right_compare_obj: The right_compare_obj of this Check.
        :type right_compare_obj: Dict[str, object]
        """
        if right_compare_obj is None:
            raise ValueError("Invalid value for `right_compare_obj`, must not be `None`")  # noqa: E501

        self._right_compare_obj = right_compare_obj

    @property
    def operator(self):
        """Gets the operator of this Check.

        Comparison operator, from left to right, when order matters.  # noqa: E501

        :return: The operator of this Check.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Check.

        Comparison operator, from left to right, when order matters.  # noqa: E501

        :param operator: The operator of this Check.
        :type operator: str
        """
        allowed_values = ["equals", "notequals", "greaterthan", "lowerthan", "contains", "notcontains"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def uname(self):
        """Gets the uname of this Check.

        Check unique name (used as id)  # noqa: E501

        :return: The uname of this Check.
        :rtype: str
        """
        return self._uname

    @uname.setter
    def uname(self, uname):
        """Sets the uname of this Check.

        Check unique name (used as id)  # noqa: E501

        :param uname: The uname of this Check.
        :type uname: str
        """
        if uname is None:
            raise ValueError("Invalid value for `uname`, must not be `None`")  # noqa: E501

        self._uname = uname
